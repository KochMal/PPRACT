import os
import logging
import psycopg2
import re
from functools import wraps
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

load_dotenv('BOT_TOKEN.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self):
        self.conn = psycopg2.connect(
            dbname="cursova",
            user="postgres",
            password="2791",  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å
            host="localhost",
            port="5432"
        )

    def __enter__(self):
        self.cursor = self.conn.cursor()
        return self.cursor

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.cursor.close()
        if exc_type is None:
            self.conn.commit()
        else:
            self.conn.rollback()
        self.conn.close()

    @staticmethod
    def get_user_role(user_id: int) -> str:
        with Database() as cursor:
            cursor.execute("SELECT role FROM users WHERE telegram_id = %s", (str(user_id),))
            user_role = cursor.fetchone()
            if user_role and user_role[0] == 'admin':
                return 'admin'
            cursor.execute("SELECT COUNT(*) FROM masters WHERE user_id = %s", (str(user_id),))
            return 'master' if cursor.fetchone()[0] > 0 else 'client'

    @staticmethod
    def is_registered(user_id: int) -> bool:
        with Database() as cursor:
            cursor.execute("SELECT registered FROM users WHERE telegram_id = %s", (str(user_id),))
            result = cursor.fetchone()
            return bool(result[0]) if result else False

    @staticmethod
    def get_admin_id() -> int:
        with Database() as cursor:
            cursor.execute("SELECT telegram_id FROM users WHERE role = 'admin' LIMIT 1")
            result = cursor.fetchone()
            return result[0] if result else None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
router = Router()
bot = Bot(
    token=os.getenv("BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())
dp.include_router(router)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class Registration(StatesGroup):
    full_name = State()
    phone = State()

class Report(StatesGroup):
    text = State()

class RequestMaster(StatesGroup):
    address = State()

class MessageClient(StatesGroup):
    text = State()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
def role_required(*allowed_roles):
    def decorator(handler):
        @wraps(handler)
        async def wrapper(message: types.Message, *args, **kwargs):
            user_id = message.from_user.id
            user_role = Database.get_user_role(user_id)
            if user_role not in allowed_roles:
                await message.answer(f"‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ {' –∏–ª–∏ '.join(allowed_roles)}–∞–º!")
                return
            return await handler(message, *args, **kwargs)
        return wrapper
    return decorator

# –ú–µ–Ω—é –¥–ª—è —Ä–æ–ª–µ–π
ROLE_MENUS = {
    'client': [
        ["üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", "üîß –í—ã–∑–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞"],
        ["üì® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–¥–±–µ–∫"]
    ],
    'master': [
        ["üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", "üìç –¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å"],
        ["‚úâÔ∏è –°–æ–æ–±—â–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"]
    ],
    'admin': [
        ["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["üîî –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞"]
    ]
}

async def show_main_menu(user_id: int):
    role = Database.get_user_role(user_id)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=text) for text in row] for row in ROLE_MENUS[role]],
        resize_keyboard=True
    )
    await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not Database.is_registered(user_id):
        await state.set_state(Registration.full_name)
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())
    else:
        await show_main_menu(user_id)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–∏–µ –§–ò–û
@router.message(Registration.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    full_name = message.text.strip()
    if not full_name or not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø\s]{3,}$', full_name):
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (–Ω–µ –º–µ–Ω–µ–µ 3 –±—É–∫–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã).")
        return
    
    await state.update_data(full_name=full_name)
    await state.set_state(Registration.phone)
    await message.answer("üì± –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: +71234567890):")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(Registration.phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not re.match(r'^\+\d{10,15}$', phone):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: +71234567890).")
        return
    
    data = await state.get_data()
    user_id = message.from_user.id
    try:
        with Database() as cursor:
            cursor.execute("SELECT COUNT(*) FROM users WHERE telegram_id = %s", (str(user_id),))
            if cursor.fetchone()[0] > 0:
                await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
                await state.clear()
                await show_main_menu(user_id)
                return
            cursor.execute('''
                INSERT INTO users 
                (telegram_id, full_name, phone, role, registered) 
                VALUES (%s, %s, %s, 'client', TRUE)
            ''', (str(user_id), data['full_name'], phone))
        await state.clear()
        await show_main_menu(user_id)
    except psycopg2.Error as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /become_master
@router.message(F.text == "/become_master")
@role_required('client')
async def request_master_status(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        with Database() as cursor:
            cursor.execute("SELECT COUNT(*) FROM master_requests WHERE user_id = %s", (str(user_id),))
            if cursor.fetchone()[0] > 0:
                await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç—É—Å –º–∞—Å—Ç–µ—Ä–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
                return
            cursor.execute("INSERT INTO master_requests (user_id) VALUES (%s)", (str(user_id),))
        
        admin_id = Database.get_admin_id()
        if admin_id:
            await bot.send_message(
                admin_id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (ID: {user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å –º–∞—Å—Ç–µ—Ä–∞."
            )
        await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç—É—Å –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except psycopg2.Error as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ (–∞–¥–º–∏–Ω)
@router.message(F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞")
@role_required('admin')
async def confirm_master_menu(message: types.Message):
    try:
        with Database() as cursor:
            cursor.execute('''
                SELECT mr.user_id, u.full_name 
                FROM master_requests mr 
                JOIN users u ON mr.user_id = u.telegram_id
            ''')
            requests = cursor.fetchall()
        
        if not requests:
            await message.answer("–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç–∞—Ç—É—Å –º–∞—Å—Ç–µ—Ä–∞.")
            return
        
        response = ["–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å—Ç–∞—Ç—É—Å –º–∞—Å—Ç–µ—Ä–∞:"]
        for req in requests:
            response.append(f"ID: {req[0]} | {req[1]}")
        await message.answer("\n".join(response))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '12345 confirm' –∏–ª–∏ '12345 reject'):")
    except psycopg2.Error as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
@router.message(lambda message: message.text and len(message.text.split()) == 2 and message.text.split()[0].isdigit())
@role_required('admin')
async def process_master_confirmation(message: types.Message):
    try:
        user_id, action = message.text.split()
        user_id = str(user_id)
        if action not in ['confirm', 'reject']:
            await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'confirm' –∏–ª–∏ 'reject'.")
            return
        
        with Database() as cursor:
            cursor.execute("SELECT full_name FROM users WHERE telegram_id = %s", (user_id,))
            user = cursor.fetchone()
            if not user:
                await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            cursor.execute("SELECT COUNT(*) FROM master_requests WHERE user_id = %s", (user_id,))
            if cursor.fetchone()[0] == 0:
                await message.answer("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            if action == 'confirm':
                cursor.execute("INSERT INTO masters (user_id, busyness) VALUES (%s, 0) ON CONFLICT (user_id) DO NOTHING", (user_id,))
                await bot.send_message(user_id, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç—É—Å –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[0]} —Ç–µ–ø–µ—Ä—å –º–∞—Å—Ç–µ—Ä.")
            else:
                await bot.send_message(user_id, "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç—É—Å –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
                await message.answer(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[0]} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
            
            cursor.execute("DELETE FROM master_requests WHERE user_id = %s", (user_id,))
        
        await show_main_menu(int(user_id))
    except (ValueError, psycopg2.Error) as e:
        logging.error(f"Error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: 'ID confirm' –∏–ª–∏ 'ID reject'.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ (–∫–ª–∏–µ–Ω—Ç)
@router.message(F.text == "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç")
@role_required('client')
async def start_report(message: types.Message, state: FSMContext):
    await state.set_state(Report.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç—á—ë—Ç –æ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:")

@router.message(Report.text)
async def save_report(message: types.Message, state: FSMContext):
    try:
        with Database() as cursor:
            cursor.execute("INSERT INTO reports (user_id, report_text) VALUES (%s, %s)", 
                           (str(message.from_user.id), message.text))
        await state.clear()
        await message.answer("‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        await show_main_menu(message.from_user.id)
    except psycopg2.Error as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞")
        await state.clear()

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–¥–±–µ–∫–∞ (–∫–ª–∏–µ–Ω—Ç)
@router.message(F.text == "üì® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–¥–±–µ–∫")
@role_required('client')
async def view_feedback(message: types.Message):
    try:
        with Database() as cursor:
            cursor.execute('''SELECT report_text, admin_feedback 
                            FROM reports 
                            WHERE user_id = %s 
                            ORDER BY created_at DESC LIMIT 5''',
                           (str(message.from_user.id),))
            reports = cursor.fetchall()
        
        if not reports:
            await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤.")
            return
        
        response = ["–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã –∏ —Ñ–∏–¥–±–µ–∫:"]
        for report in reports:
            feedback = report[1] if report[1] else "–ù–µ—Ç —Ñ–∏–¥–±–µ–∫–∞"
            response.append(f"–û—Ç—á–µ—Ç: {report[0]}\n–§–∏–¥–±–µ–∫: {feedback}\n")
        await message.answer("\n".join(response))
    except psycopg2.Error as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

# –í—ã–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞ (–∫–ª–∏–µ–Ω—Ç)
@router.message(F.text == "üîß –í—ã–∑–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞")
@role_required('client')
async def request_master(message: types.Message, state: FSMContext):
    await state.set_state(RequestMaster.address)
    await message.answer("üìå –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å –º–∞—Å—Ç–µ—Ä–∞:")

@router.message(RequestMaster.address)
async def save_request(message: types.Message, state: FSMContext):
    try:
        with Database() as cursor:
            cursor.execute("SELECT COUNT(*) FROM requests WHERE client_id = %s AND status != 'completed'", 
                           (str(message.from_user.id),))
            if cursor.fetchone()[0] > 0:
                await message.answer("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞!")
                await state.clear()
                await show_main_menu(message.from_user.id)
                return
            cursor.execute("INSERT INTO requests (client_id, address) VALUES (%s, %s)",
                           (str(message.from_user.id), message.text))
        await state.clear()
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–∏—Ç –º–∞—Å—Ç–µ—Ä–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        await show_main_menu(message.from_user.id)
    except psycopg2.Error as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
        await state.clear()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ (–º–∞—Å—Ç–µ—Ä)
@router.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
@role_required('master')
async def show_requests(message: types.Message):
    try:
        with Database() as cursor:
            cursor.execute('''
                SELECT r.id, r.address, r.status, u.full_name 
                FROM requests r 
                JOIN users u ON r.client_id = u.telegram_id 
                WHERE r.master_id = %s
            ''', (str(message.from_user.id),))
            requests = cursor.fetchall()
        
        if not requests:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
            return
        
        response = ["–í–∞—à–∏ –∑–∞—è–≤–∫–∏:"]
        status_map = {'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç', 'in_progress': 'üöó –í –ø—Ä–æ—Ü–µ—Å—Å–µ', 'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞'}
        for req in requests:
            response.append(f"‚Ññ{req[0]} | –ê–¥—Ä–µ—Å: {req[1]} | –°—Ç–∞—Ç—É—Å: {status_map.get(req[2], '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} | –ö–ª–∏–µ–Ω—Ç: {req[3]}")
        await message.answer("\n".join(response))
    except psycopg2.Error as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫")

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –∞–¥—Ä–µ—Å–∞ (–º–∞—Å—Ç–µ—Ä)
@router.message(F.text == "üìç –¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å")
@role_required('master')
async def show_current_address(message: types.Message):
    try:
        with Database() as cursor:
            cursor.execute('''SELECT address FROM requests 
                            WHERE master_id = %s AND status = 'in_progress' 
                            ORDER BY created_at DESC LIMIT 1''',
                            (str(message.from_user.id),))
            address = cursor.fetchone()
        
        if address:
            await message.answer(f"üè† –¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: {address[0]}")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ")
    except psycopg2.Error as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ (–º–∞—Å—Ç–µ—Ä)
@router.message(F.text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏")
@role_required('master')
async def change_request_status(message: types.Message):
    try:
        with Database() as cursor:
            cursor.execute('''
                SELECT id, status 
                FROM requests 
                WHERE master_id = %s AND status != 'completed' 
                ORDER BY created_at DESC LIMIT 1
            ''', (str(message.from_user.id),))
            request = cursor.fetchone()
        
        if not request:
            await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
            return
        
        request_id, current_status = request
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚è≥ –û–∂–∏–¥–∞–µ—Ç"), KeyboardButton(text="üöó –í –ø—Ä–æ—Ü–µ—Å—Å–µ")],
                [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ‚Ññ{request_id}: {current_status}. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", reply_markup=keyboard)
    except psycopg2.Error as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
@router.message(F.text.in_(["‚è≥ –û–∂–∏–¥–∞–µ—Ç", "üöó –í –ø—Ä–æ—Ü–µ—Å—Å–µ", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"]))
@role_required('master')
async def process_status_change(message: types.Message):
    status_map = {"‚è≥ –û–∂–∏–¥–∞–µ—Ç": "pending", "üöó –í –ø—Ä–æ—Ü–µ—Å—Å–µ": "in_progress", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å": "completed"}
    new_status = status_map[message.text]
    
    try:
        with Database() as cursor:
            cursor.execute('''
                SELECT id, client_id, status 
                FROM requests 
                WHERE master_id = %s AND status != 'completed' 
                ORDER BY created_at DESC LIMIT 1
            ''', (str(message.from_user.id),))
            request = cursor.fetchone()
            
            if not request:
                await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
                return
            
            request_id, client_id, old_status = request
            if old_status == new_status:
                await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                return
            
            cursor.execute("UPDATE requests SET status = %s WHERE id = %s", (new_status, request_id))
        
        await bot.send_message(client_id, f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ ‚Ññ{request_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {message.text}")
        await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ‚Ññ{request_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {message.text}", reply_markup=ReplyKeyboardRemove())
        await show_main_menu(message.from_user.id)
    except psycopg2.Error as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

# –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (–º–∞—Å—Ç–µ—Ä)
@router.message(F.text == "‚úâÔ∏è –°–æ–æ–±—â–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É")
@role_required('master')
async def message_client_start(message: types.Message, state: FSMContext):
    try:
        with Database() as cursor:
            cursor.execute('''
                SELECT client_id 
                FROM requests 
                WHERE master_id = %s AND status = 'in_progress' 
                ORDER BY created_at DESC LIMIT 1
            ''', (str(message.from_user.id),))
            client = cursor.fetchone()
        
        if not client:
            await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º.")
            return
        
        await state.update_data(client_id=client[0])
        await state.set_state(MessageClient.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:")
    except psycopg2.Error as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞")

@router.message(MessageClient.text)
async def send_message_to_client(message: types.Message, state: FSMContext):
    data = await state.get_data()
    client_id = data['client_id']
    try:
        await bot.send_message(client_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–∞—Å—Ç–µ—Ä–∞: {message.text}")
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É!")
        await state.clear()
        await show_main_menu(message.from_user.id)
    except Exception as e:
        logging.error(f"Error sending message: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await state.clear()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@role_required('admin')
async def show_stats(message: types.Message):
    try:
        with Database() as cursor:
            cursor.execute("SELECT COUNT(*) FROM users")
            total_users = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM requests WHERE status = 'pending'")
            pending = cursor.fetchone()[0]
            cursor.execute("SELECT AVG(busyness) FROM masters")
            avg_load = cursor.fetchone()[0] or 0
        
        await message.answer(f"""
üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫: {pending}
üì¶ –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤: {avg_load:.1f}
""")
    except psycopg2.Error as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ (–∞–¥–º–∏–Ω)
@router.message(F.text == "üîî –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏")
@role_required('admin')
async def show_pending_requests(message: types.Message):
    try:
        with Database() as cursor:
            cursor.execute('''SELECT r.id, u.full_name, r.address 
                            FROM requests r 
                            JOIN users u ON r.client_id = u.telegram_id 
                            WHERE r.status = 'pending' ''')
            requests = cursor.fetchall()
        
        if not requests:
            await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫")
            return
        
        response = ["–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏:"]
        for req in requests:
            response.append(f"‚Ññ{req[0]} | –ö–ª–∏–µ–Ω—Ç: {req[1]} | –ê–¥—Ä–µ—Å: {req[2]}")
        await message.answer("\n".join(response))
    except psycopg2.Error as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫")

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω)
@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
@role_required('admin')
async def show_users(message: types.Message):
    try:
        with Database() as cursor:
            cursor.execute('''SELECT telegram_id, full_name FROM users''')
            users = cursor.fetchall()
            cursor.execute('''SELECT user_id FROM masters''')
            masters = set(row[0] for row in cursor.fetchall())

        response = ["–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"]
        for user in users:
            role = 'üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä' if user[0] in masters else ('üëë –ê–¥–º–∏–Ω' if Database.get_user_role(int(user[0])) == 'admin' else 'üë§ –ö–ª–∏–µ–Ω—Ç')
            response.append(f"ID: {user[0]} | {user[1]} | {role}")
        await message.answer("\n".join(response))
    except psycopg2.Error as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    dp.run_polling(bot)